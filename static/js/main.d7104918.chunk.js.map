{"version":3,"sources":["random002.jpg","dividerBlue.png","dividerPink.png","js.png","html.png","css.png","react.png","node.png","python.png","affinityDesigner.png","maya.png","cPlusPlus.png","git.png","linkedInLogo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","SkillBar","src","jsLogo","className","htmlLogo","cssLogo","reactLogo","nodeLogo","pythonLogo","afLogo","mayaLogo","cPlusPlusLogo","PDivider","pinkDivider","alt","SubHeaders","props","title","Info","info","App","state","intro","current","skillXp","about","logo","id","this","href","target","gitHubLogo","linkInLogo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,iaCiBrCC,G,MAAS,WACb,OACE,6BACE,yBAAKC,IAAKC,IAAQC,UAAU,eAC5B,yBAAKF,IAAKG,IAAUD,UAAU,eAC9B,yBAAKF,IAAKI,IAASF,UAAU,eAC7B,yBAAKF,IAAKK,IAAWH,UAAU,eAC/B,yBAAKF,IAAKM,IAAUJ,UAAU,eAC9B,yBAAKF,IAAKO,IAAYL,UAAU,eAChC,yBAAKF,IAAKQ,IAAQN,UAAU,eAC5B,yBAAKF,IAAKS,IAAUP,UAAU,eAC9B,yBAAKF,IAAKU,IAAeR,UAAU,kBAKnCS,EAAS,WACb,OACE,6BACE,yBAAKX,IAAKY,IAAaV,UAAU,UAAUW,IAAI,cAY/CC,EAAW,SAACC,GAChB,OACE,yBAAKb,UAAU,YACb,4BAAKa,EAAMC,SAKXC,EAAK,SAACF,GACV,OACE,yBAAKb,UAAU,YACb,kBAAC,EAAD,CAAYc,MAAOD,EAAMC,QACzB,2BAAID,EAAMG,QA4CDC,E,2MAtCbC,MAAQ,CACNC,MAAM,gEACNC,QAAQ,yHACRC,QAAQ,oWACRC,MAAM,0U,wEAGN,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aACb,yBAAKF,IAAKyB,IAAMvB,UAAU,aAAaW,IAAI,oBAE7C,yBAAKa,GAAG,QACN,kBAAC,EAAD,CAAMR,KAAMS,KAAKP,MAAMC,QACvB,kBAAC,EAAD,CAAMH,KAAMS,KAAKP,MAAME,UACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMJ,KAAMS,KAAKP,MAAMG,QAASP,MAAM,wBACtC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAME,KAAMS,KAAKP,MAAMI,MAAOR,MAAM,aACpC,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,CAAYA,MAAM,iBAClB,uBAAGY,KAAK,6BAA6BC,OAAO,UAC1C,yBAAK7B,IAAK8B,IAAY5B,UAAU,gBAElC,uBAAG0B,KAAK,iDAAiDC,OAAO,UAC9D,yBAAK7B,IAAK+B,IAAY7B,UAAU,wB,GA7B9B8B,IAAMC,WCrDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d7104918.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/random002.1d6a353e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dividerBlue.c0ddb114.png\";","module.exports = __webpack_public_path__ + \"static/media/dividerPink.8fb43516.png\";","module.exports = __webpack_public_path__ + \"static/media/js.00a3c5cb.png\";","module.exports = __webpack_public_path__ + \"static/media/html.7187cacf.png\";","module.exports = __webpack_public_path__ + \"static/media/css.683a9ec2.png\";","module.exports = __webpack_public_path__ + \"static/media/react.3a0b5e47.png\";","module.exports = __webpack_public_path__ + \"static/media/node.d8542544.png\";","module.exports = __webpack_public_path__ + \"static/media/python.4df685b6.png\";","module.exports = __webpack_public_path__ + \"static/media/affinityDesigner.fac9b054.png\";","module.exports = __webpack_public_path__ + \"static/media/maya.1abcba7e.png\";","module.exports = __webpack_public_path__ + \"static/media/cPlusPlus.802e21e6.png\";","module.exports = __webpack_public_path__ + \"static/media/git.a9919ab6.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedInLogo.519e2045.png\";","import React from 'react';\nimport logo from './random002.jpg';\nimport blueDivider from './dividerBlue.png';\nimport pinkDivider from './dividerPink.png';\nimport jsLogo from './js.png';\nimport htmlLogo from './html.png';\nimport cssLogo from './css.png';\nimport reactLogo from './react.png';\nimport nodeLogo from './node.png';\nimport pythonLogo from './python.png';\nimport afLogo from './affinityDesigner.png';\nimport mayaLogo from './maya.png';\nimport cPlusPlusLogo from './cPlusPlus.png';\nimport gitHubLogo from './git.png';\nimport linkInLogo from './linkedInLogo.png';\nimport './App.css';\n\nconst SkillBar=()=>{\n  return(\n    <div>\n      <img src={jsLogo} className=\"skill-icon\"/>\n      <img src={htmlLogo} className=\"skill-icon\"/>\n      <img src={cssLogo} className=\"skill-icon\"/>\n      <img src={reactLogo} className=\"skill-icon\"/>\n      <img src={nodeLogo} className=\"skill-icon\"/>\n      <img src={pythonLogo} className=\"skill-icon\"/>\n      <img src={afLogo} className=\"skill-icon\"/>\n      <img src={mayaLogo} className=\"skill-icon\"/>\n      <img src={cPlusPlusLogo} className=\"skill-icon\"/>\n    </div>\n  )\n}\n\nconst PDivider=()=>{\n  return(\n    <div>\n      <img src={pinkDivider} className=\"Divider\" alt=\"divider\" />\n    </div>\n  )\n}\nconst BDivider=()=>{\n  return(\n    <div>\n      <img src={blueDivider} className=\"Divider\" alt=\"divider\" />\n    </div>\n  )\n}\n\nconst SubHeaders=(props)=>{\n  return(\n    <div className=\"info-txt\">\n      <h2>{props.title}</h2>\n    </div>\n  )\n}\n\nconst Info=(props)=>{\n  return(\n    <div className=\"info-txt\">\n      <SubHeaders title={props.title} />\n      <p>{props.info}</p>\n    </div>\n  )\n}\n\nclass App extends React.Component{\n  state = {\n    intro:\"Hello world! My name is Geo Cook and welcome to my portfolio.\",\n    current:\"I am currently taking the Master Course at CodeNation in Chester. Here I am learning to become a full stack developer.\",\n    skillXp:\"At CodeNation I am learning JaveScript. So far I have learnt the fundamentals of front end development with html, css, react and more. Very soon I will be learning about back end developement. I have a BA(Hons) in Computer Visualisation and Animation from Bournemouth University. There I learnt C++ and python through scripting in the 3D software, Maya.\",\n    about:\"Creative Coder with a love for digital art, VFX and all things animated. I am eager to learn as much as I can about how tech and art come together to create such amazing games, films, apps, websites and everything in between and behind the scenes. I am a work in progress but please feel free to look around or get in contact.\"\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"intro-div\">\n            <img src={logo} className=\"Maya-image\" alt=\"3D-sphere-face\" />\n          </div>\n          <div id=\"text\">\n            <Info info={this.state.intro} />\n            <Info info={this.state.current} />\n            <PDivider />\n            <Info info={this.state.skillXp} title=\"Skills + Experience\" />\n            <SkillBar />\n            <PDivider />\n            <Info info={this.state.about} title=\"About Me\" />\n            <PDivider />\n            <div>\n              <SubHeaders title=\"Get in touch\" />\n              <a href=\"https://github.com/GeoCook\" target=\"_blank\">\n                <img src={gitHubLogo} className=\"skill-icon\"/>\n              </a>\n              <a href=\"https://www.linkedin.com/in/geo-cook-61b55a25/\" target=\"_blank\">\n                <img src={linkInLogo} className=\"skill-icon\"/>\n              </a>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}